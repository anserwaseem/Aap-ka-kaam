import { app, BrowserWindow, ipcMain } from "electron";
// import { getNames } from "../db/sqlite3";
// import createMainWindow from "./mainWindow";

import sqlite3 from "sqlite3";
import { open } from "sqlite";
import path from "path";
// import { ConnectionBuilder } from "electron-cgi";

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require("electron-squirrel-startup")) {
  // eslint-disable-line global-require
  app.quit();
}

// const windowUrl = app.isPackaged
//   ? MAIN_WINDOW_WEBPACK_ENTRY
//   : "http://localhost:9000";

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.on("ready", () => {
  // ipcMain.handle("getTestTableNamesi", getNames);

  // console.log("getNames", getNames());
  createWindow;
});

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on("window-all-closed", () => {
  if (process.platform !== "darwin") {
    app.quit();
  }
});

app.on("activate", () => {
  // On OS X it's common to re-create a window in the app when the
  // dock icon is clicked and there are no other windows open.
  if (BrowserWindow.getAllWindows().length === 0) {
    createWindow();
  }
});

// This is called when requested from the view
// ipcMain.on("RequestFromView", (event, args) => {
//   (async () => {
//     // Open sqlite3 database
//     const db = await open({
//       // filename: "db.db",
//       // driver: sqlite3.Database,

//       filename: path.join(__dirname, "../db.db"),
//       driver: sqlite3.Database,
//     });

//     const queryResult = await db.get(args.query);
//     console.log("queryResult", queryResult);

//   })();

//   // send back to the renderer process that we are complete
//   if (typeof mainWindow !== "undefined" && mainWindow !== null) {
//     mainWindow.webContents.send("DoneWithQuery", {
//       myResult: true,
//     });
//   }
// });

// In this file you can include the rest of your app's specific main process
// code. You can also put them in separate files and import them here.


// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;;
let mainWindow: BrowserWindow;
function createWindow(): void {
  // const query = "select * from TestTable";
  // const statement = db.prepare(query);
  // const result = statement.all();
  // console.log("statement.all()", result);

  // Create the browser window.
  mainWindow = new BrowserWindow({
    height: 600,
    width: 1200,
    webPreferences: {
      preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
    },
  });

  ipcMain.on("asynchronous-message", (event, arg) => {
    console.log(arg); // prints "ping async"
    event.sender.send("asynchronous-reply", "pong async");
  });

  ipcMain.on("synchronous-message", (event, arg) => {
    console.log(arg); // prints "ping sync"
    event.returnValue = "pong sync";
  });

  ipcMain.handle("invoke-handle-message", (event, arg) => {
    console.log(arg);
    return "pong";
  });

  // ipcMain.handle("getTestTableNamesChannel", async (event, arg) => {
  //   console.log("getTestTableNamesChannel");
  //   const result = await getNames();
  //   console.log("getTestTableNamesChannel result: ", result);
  //   return result;
  // });

  // ipcMain.handle("getTestTableNamesChannel", (event, arg) => {
  //   console.log("getTestTableNames ipcMain handle called", arg);
  //   return getNames();
  // });

  // and load the index.html of the app.
  mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);

  // mainWindow.webContents.on("did-finish-load", () => {
  //   console.log("did-finish-load");
  //   mainWindow.webContents.send("getNames", getNames());
  // });

  console.log(mainWindow.webContents);
  // Open the DevTools.
  mainWindow.webContents.openDevTools();
}